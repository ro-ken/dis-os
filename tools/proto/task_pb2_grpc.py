# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import task_pb2 as task__pb2


class TaskServiceStub(object):
    """python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. task.proto

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.task_test = channel.unary_unary(
                '/TaskService/task_test',
                request_serializer=task__pb2.TaskRequest.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.task_transfer_file = channel.unary_unary(
                '/TaskService/task_transfer_file',
                request_serializer=task__pb2.File.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.task_get_res = channel.unary_unary(
                '/TaskService/task_get_res',
                request_serializer=task__pb2.ResourceRequest.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.send_image = channel.unary_unary(
                '/TaskService/send_image',
                request_serializer=task__pb2.Image.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.task_yolox_vedio = channel.stream_stream(
                '/TaskService/task_yolox_vedio',
                request_serializer=task__pb2.Image.SerializeToString,
                response_deserializer=task__pb2.Image.FromString,
                )
        self.task_yolox_image = channel.unary_unary(
                '/TaskService/task_yolox_image',
                request_serializer=task__pb2.Image.SerializeToString,
                response_deserializer=task__pb2.Image.FromString,
                )
        self.task_lic_detect = channel.unary_unary(
                '/TaskService/task_lic_detect',
                request_serializer=task__pb2.Image.SerializeToString,
                response_deserializer=task__pb2.Image.FromString,
                )
        self.task_linear_regression = channel.unary_unary(
                '/TaskService/task_linear_regression',
                request_serializer=task__pb2.Null.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.task_num_detect = channel.unary_unary(
                '/TaskService/task_num_detect',
                request_serializer=task__pb2.Null.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.task_monet_transfer = channel.unary_unary(
                '/TaskService/task_monet_transfer',
                request_serializer=task__pb2.Null.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.task_yolo5 = channel.unary_unary(
                '/TaskService/task_yolo5',
                request_serializer=task__pb2.File.SerializeToString,
                response_deserializer=task__pb2.Image.FromString,
                )
        self.task_compose = channel.unary_unary(
                '/TaskService/task_compose',
                request_serializer=task__pb2.Image_x2.SerializeToString,
                response_deserializer=task__pb2.Image.FromString,
                )
        self.task_style_transfer = channel.unary_unary(
                '/TaskService/task_style_transfer',
                request_serializer=task__pb2.File_x2.SerializeToString,
                response_deserializer=task__pb2.Image.FromString,
                )


class TaskServiceServicer(object):
    """python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. task.proto

    """

    def task_test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_transfer_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_get_res(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_image(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_yolox_vedio(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_yolox_image(self, request, context):
        """task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_lic_detect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_linear_regression(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_num_detect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_monet_transfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_yolo5(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_compose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_style_transfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'task_test': grpc.unary_unary_rpc_method_handler(
                    servicer.task_test,
                    request_deserializer=task__pb2.TaskRequest.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'task_transfer_file': grpc.unary_unary_rpc_method_handler(
                    servicer.task_transfer_file,
                    request_deserializer=task__pb2.File.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'task_get_res': grpc.unary_unary_rpc_method_handler(
                    servicer.task_get_res,
                    request_deserializer=task__pb2.ResourceRequest.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'send_image': grpc.unary_unary_rpc_method_handler(
                    servicer.send_image,
                    request_deserializer=task__pb2.Image.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'task_yolox_vedio': grpc.stream_stream_rpc_method_handler(
                    servicer.task_yolox_vedio,
                    request_deserializer=task__pb2.Image.FromString,
                    response_serializer=task__pb2.Image.SerializeToString,
            ),
            'task_yolox_image': grpc.unary_unary_rpc_method_handler(
                    servicer.task_yolox_image,
                    request_deserializer=task__pb2.Image.FromString,
                    response_serializer=task__pb2.Image.SerializeToString,
            ),
            'task_lic_detect': grpc.unary_unary_rpc_method_handler(
                    servicer.task_lic_detect,
                    request_deserializer=task__pb2.Image.FromString,
                    response_serializer=task__pb2.Image.SerializeToString,
            ),
            'task_linear_regression': grpc.unary_unary_rpc_method_handler(
                    servicer.task_linear_regression,
                    request_deserializer=task__pb2.Null.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'task_num_detect': grpc.unary_unary_rpc_method_handler(
                    servicer.task_num_detect,
                    request_deserializer=task__pb2.Null.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'task_monet_transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.task_monet_transfer,
                    request_deserializer=task__pb2.Null.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'task_yolo5': grpc.unary_unary_rpc_method_handler(
                    servicer.task_yolo5,
                    request_deserializer=task__pb2.File.FromString,
                    response_serializer=task__pb2.Image.SerializeToString,
            ),
            'task_compose': grpc.unary_unary_rpc_method_handler(
                    servicer.task_compose,
                    request_deserializer=task__pb2.Image_x2.FromString,
                    response_serializer=task__pb2.Image.SerializeToString,
            ),
            'task_style_transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.task_style_transfer,
                    request_deserializer=task__pb2.File_x2.FromString,
                    response_serializer=task__pb2.Image.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. task.proto

    """

    @staticmethod
    def task_test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_test',
            task__pb2.TaskRequest.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_transfer_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_transfer_file',
            task__pb2.File.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_get_res(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_get_res',
            task__pb2.ResourceRequest.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/send_image',
            task__pb2.Image.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_yolox_vedio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/TaskService/task_yolox_vedio',
            task__pb2.Image.SerializeToString,
            task__pb2.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_yolox_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_yolox_image',
            task__pb2.Image.SerializeToString,
            task__pb2.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_lic_detect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_lic_detect',
            task__pb2.Image.SerializeToString,
            task__pb2.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_linear_regression(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_linear_regression',
            task__pb2.Null.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_num_detect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_num_detect',
            task__pb2.Null.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_monet_transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_monet_transfer',
            task__pb2.Null.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_yolo5(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_yolo5',
            task__pb2.File.SerializeToString,
            task__pb2.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_compose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_compose',
            task__pb2.Image_x2.SerializeToString,
            task__pb2.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def task_style_transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_style_transfer',
            task__pb2.File_x2.SerializeToString,
            task__pb2.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
