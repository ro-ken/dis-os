# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import task_pb2 as task__pb2


class TaskServiceStub(object):
    """python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. task.proto

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.task_service_1 = channel.unary_unary(
                '/TaskService/task_service_1',
                request_serializer=task__pb2.TaskRequest.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.send_file = channel.unary_unary(
                '/TaskService/send_file',
                request_serializer=task__pb2.FileRequest.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.send_resource = channel.unary_unary(
                '/TaskService/send_resource',
                request_serializer=task__pb2.ResourceRequest.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.send_image = channel.unary_unary(
                '/TaskService/send_image',
                request_serializer=task__pb2.ImageRequest.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )
        self.send_ai = channel.unary_unary(
                '/TaskService/send_ai',
                request_serializer=task__pb2.AIRequesst.SerializeToString,
                response_deserializer=task__pb2.CommonReply.FromString,
                )


class TaskServiceServicer(object):
    """python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. task.proto

    """

    def task_service_1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_file(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_resource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_image(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_ai(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'task_service_1': grpc.unary_unary_rpc_method_handler(
                    servicer.task_service_1,
                    request_deserializer=task__pb2.TaskRequest.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'send_file': grpc.unary_unary_rpc_method_handler(
                    servicer.send_file,
                    request_deserializer=task__pb2.FileRequest.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'send_resource': grpc.unary_unary_rpc_method_handler(
                    servicer.send_resource,
                    request_deserializer=task__pb2.ResourceRequest.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'send_image': grpc.unary_unary_rpc_method_handler(
                    servicer.send_image,
                    request_deserializer=task__pb2.ImageRequest.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
            'send_ai': grpc.unary_unary_rpc_method_handler(
                    servicer.send_ai,
                    request_deserializer=task__pb2.AIRequesst.FromString,
                    response_serializer=task__pb2.CommonReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. task.proto

    """

    @staticmethod
    def task_service_1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/task_service_1',
            task__pb2.TaskRequest.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/send_file',
            task__pb2.FileRequest.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_resource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/send_resource',
            task__pb2.ResourceRequest.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/send_image',
            task__pb2.ImageRequest.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_ai(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskService/send_ai',
            task__pb2.AIRequesst.SerializeToString,
            task__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
