# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import communication_pb2 as communication__pb2


class CommunicationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TaskRoute = channel.unary_unary(
                '/Communication/TaskRoute',
                request_serializer=communication__pb2.TaskRouteRequest.SerializeToString,
                response_deserializer=communication__pb2.TaskRouteReply.FromString,
                )
        self.ImageRoute = channel.unary_unary(
                '/Communication/ImageRoute',
                request_serializer=communication__pb2.ImageRouteRequest.SerializeToString,
                response_deserializer=communication__pb2.ImageRouteReplay.FromString,
                )
        self.VideoHeadRoute = channel.unary_unary(
                '/Communication/VideoHeadRoute',
                request_serializer=communication__pb2.VideoHeadRouteRequest.SerializeToString,
                response_deserializer=communication__pb2.VideoHeadRouteReplay.FromString,
                )
        self.VideoDataRoute = channel.stream_unary(
                '/Communication/VideoDataRoute',
                request_serializer=communication__pb2.VideoDataRouteRequest.SerializeToString,
                response_deserializer=communication__pb2.VideoDataRouteReplay.FromString,
                )


class CommunicationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TaskRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VideoHeadRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VideoDataRoute(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TaskRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskRoute,
                    request_deserializer=communication__pb2.TaskRouteRequest.FromString,
                    response_serializer=communication__pb2.TaskRouteReply.SerializeToString,
            ),
            'ImageRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageRoute,
                    request_deserializer=communication__pb2.ImageRouteRequest.FromString,
                    response_serializer=communication__pb2.ImageRouteReplay.SerializeToString,
            ),
            'VideoHeadRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.VideoHeadRoute,
                    request_deserializer=communication__pb2.VideoHeadRouteRequest.FromString,
                    response_serializer=communication__pb2.VideoHeadRouteReplay.SerializeToString,
            ),
            'VideoDataRoute': grpc.stream_unary_rpc_method_handler(
                    servicer.VideoDataRoute,
                    request_deserializer=communication__pb2.VideoDataRouteRequest.FromString,
                    response_serializer=communication__pb2.VideoDataRouteReplay.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Communication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Communication(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TaskRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Communication/TaskRoute',
            communication__pb2.TaskRouteRequest.SerializeToString,
            communication__pb2.TaskRouteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Communication/ImageRoute',
            communication__pb2.ImageRouteRequest.SerializeToString,
            communication__pb2.ImageRouteReplay.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VideoHeadRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Communication/VideoHeadRoute',
            communication__pb2.VideoHeadRouteRequest.SerializeToString,
            communication__pb2.VideoHeadRouteReplay.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VideoDataRoute(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Communication/VideoDataRoute',
            communication__pb2.VideoDataRouteRequest.SerializeToString,
            communication__pb2.VideoDataRouteReplay.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
